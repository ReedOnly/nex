from setuptools import setup, Extension
from setuptools.command.build_ext import build_ext
import sys
import setuptools

class get_pybind_include(object):
    def __init__(self, user=False):
        self.user = user

    def __str__(self):
        import pybind11
        return pybind11.get_include(self.user)

pynex = Extension(
    'nex.pynex',
    ['${CMAKE_CURRENT_SOURCE_DIR}/nex/nex.cpp'],
    include_dirs=[
        '${NEX_INCLUDE_DIR}',
        get_pybind_include(),
        get_pybind_include(user=True)
    ],
    libraries=['nex'],
    library_dirs=['${NEX_LIBRARY_DIR}'],
    language='c++'
)


class BuildExt(build_ext):
    """A custom build extension for adding compiler-specific options."""
    c_opts = {
        'msvc': ['/EHsc'],
        'unix': [],
    }

    if sys.platform == 'darwin':
        c_opts['unix'] += ['-stdlib=libc++', '-mmacosx-version-min=10.7']

    def build_extensions(self):
        ct = self.compiler.compiler_type
        opts = self.c_opts.get(ct, [])
        if ct == 'unix':
            opts.append('-DVERSION_INFO="%s"' % self.distribution.get_version())
            opts.append('${CXX_STANDARD}')
            # if has_flag(self.compiler, '-fvisibility=hidden'):
            #     opts.append('-fvisibility=hidden')
        elif ct == 'msvc':
            opts.append('/DVERSION_INFO=\\"%s\\"' % self.distribution.get_version())
        for ext in self.extensions:
            ext.extra_compile_args = opts
        build_ext.build_extensions(self)

setup(
    name='nex',
    version='${PACKAGE_VERSION}',
    description='',
    long_description='',
    author='Statoil ASA',
    author_email='fg_gpl@statoil.com',
    url='https://github.com/Statoil/nex',
    package_dir={'' : '${CMAKE_CURRENT_SOURCE_DIR}'},
    packages=['nex'],
    package_data={'': ['License', 'README']},
    install_requires=['pandas >=0.21.1'],
    setup_requires=['setuptools >=28', 'pybind11 >=2.2'],
    ext_modules=[pynex],
    cmdclass={'build_ext': BuildExt},
    zip_safe=False,
)
